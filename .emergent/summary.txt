<analysis>
The previous AI engineer successfully developed and refined a Rugs Pattern Tracker application. Initially, it was a basic FastAPI backend integrating with an external WebSocket for game state updates and broadcasting to a React frontend. The core functionality involved statistical pattern detection. A significant phase involved implementing an Enhanced Pattern Engine with more robust statistical models and an attempt to introduce an ML layer. After a rollback due to a critical issue with the first ML integration, the engineer successfully reimplemented a Game-Aware ML Engine, ensuring it only uses features relevant to the game's mechanics rather than generic technical analysis. The frontend was progressively transformed into a developer debug menu to display a high density of real-time data, including live predictions, pattern statuses, ML insights, and a historical record of prediction accuracy, all without requiring vertical scrolling. The communication adheres strictly to defined API contracts, environment variables, and supervisor controls. The work concluded with a final UI cleanup and a handoff for verification.
</analysis>

<product_requirements>
The product is a Rugs Pattern Tracker, a full-stack application designed to detect treasury patterns and predict rug timing in a specific game (Rugs.fun).
**Backend Requirements:**
- **Core Functionality:** Process real-time game state updates from an external Socket.IO (Rugs.fun).
- **Pattern Detection:** Implement and evolve pattern detection logic:
    - Initial : Basic pattern detection (Post-Max-Payout Recovery, Ultra-Short High-Payout, Momentum Thresholds).
    - : Advanced statistical models with CSV-validated parameters for the three core patterns, including game record dataclasses and statistical validation.
    - : An additive machine learning layer focusing *only* on game-specific features (e.g., pattern triggers, duration analysis, treasury pressure), *not* generic financial indicators (like RSI, MACD). This ML layer should enhance predictions and provide insights into feature importance.
- **API Endpoints:**
    - : Stream real-time game state, pattern data, and ML insights to the frontend.
    - : Provide health checks (), comprehensive system status (), current pattern states and predictions (), game history (), metrics (), and status checks (). All API routes must be prefixed with .
- **Data Handling:** Store game history and prediction outcomes. Utilize UUIDs instead of MongoDB ObjectIDs for serialization.
- **Robustness:** Implement reconnection logic for the external WebSocket, error handling, and logging.
- **Environment:** FastAPI backend, Python dependencies via , managed by Supervisor. Adhere to strict URL/port rules (e.g., , , no hardcoding).

**Frontend Requirements:**
- **UI:** A React application for displaying real-time data.
- **Dashboard Facelift:** Transform the dashboard into a developer debug menu style, displaying all critical information (predictions, pattern validations, ML insights, system stats, prediction history, raw payload) on a single screen without scrolling (on a 1080p viewport).
- **Real-time Updates:** Connect to the backend WebSocket to receive and display live data.
- **Prediction History:** A dedicated panel showing predicted vs. actual rug ticks, the difference, peak multiplier, and end price for past games, with color-coded accuracy.
- **Technology:** React, Tailwind CSS,  for icons. Frontend must use  for API and WebSocket connections.

The overall goal is to provide a comprehensive, real-time tracking and prediction system that combines robust statistical analysis with an adaptive machine learning layer, presented through an information-dense debug interface.
</product_requirements>

<key_technical_concepts>
- **Full-Stack Architecture:** FastAPI backend with React frontend.
- **Real-time Communication:** WebSockets for live data streaming, Socket.IO for external data source.
- **Pattern Detection:** Multi-stage: initial, enhanced statistical (), and game-aware machine learning ().
- **Data Structures:** Python  for ,  for rolling history.
- **Frontend Frameworks:** React for UI, Tailwind CSS for styling,  for icons.
- **Environment Management:** Supervisor for process management,  for environment variables.
</key_technical_concepts>

<code_architecture>
The application has a standard full-stack structure with a  for FastAPI and  for React.



- ****:
    -   **Importance:** This is the heart of the backend, orchestrating all services. It defines the FastAPI application, sets up CORS, handles database connections (though MongoDB isn't actively used for pattern storage but for sample status checks), and defines all REST and WebSocket endpoints.
    -   **Changes Made:**
        -   Refactored to import and integrate  (initially) and then  (currently).
        -   Switched from the basic  to  (which uses ), and subsequently to  (which wraps  with ).
        -   Ensured all API routes (e.g., , , , , ) are prefixed with .
        -   Relocated the WebSocket endpoint to .
        -   Implemented a  JSON serializer for  objects to ensure proper WebSocket payload serialization.
        -   Added logic to track and store  (predicted vs actual outcomes) in a . This history is now included in WebSocket updates and exposed via a new  endpoint.
        -   Renamed original MongoDB sample endpoints to  to avoid conflict.

-   ****:
    -   **Importance:** Defines the core statistical pattern detection logic. It includes  (dataclass for detailed game analytics) and  (implements Post-Max-Payout Recovery, Ultra-Short High-Payout, Momentum Thresholds based on CSV-validated parameters).
    -   **Changes Made:** This file was initially introduced. It was temporarily replaced during the first ML integration attempt (Chat Message 51) but then restored to its current statistical-only version during the rollback (Chat Message 59). It serves as the base engine for the .

-   ****:
    -   **Importance:** This new module introduces the game-specific machine learning layer. It provides feature extraction relevant only to the game's mechanics, an online learning component to adjust weights, and a wrapper that combines ML predictions with the base statistical patterns.
    -   **Changes Made:** This file was introduced to encapsulate , , , and . It was part of the problematic first ML integration attempt (Chat Message 51) and subsequently re-introduced in a refined, game-aware version after the rollback (Chat Message 63). It is designed to work additively with the .

-   ****:
    -   **Importance:** Manages Python dependencies for the backend.
    -   **Changes Made:** Updated multiple times to include , , , and other necessary libraries. Versions were updated and then rolled back to a stable set, and finally updated again for the game-aware ML engine. HTML entities () were fixed.

-   ****:
    -   **Importance:** The main React component rendering the user interface. It establishes and manages the WebSocket connection to the backend, fetches and displays real-time game data, pattern statuses, and ML-enhanced predictions.
    -   **Changes Made:**
        -   Initial implementation was a basic dashboard.
        -   Refactored into a developer debug menu with a grid-based, single-screen layout to prevent scrolling, displaying: Prediction, Live Tracking, ML Insights, Patterns Table, Weights & System, and Raw Payload.
        -   Updated to consume new  and  payloads from the backend WebSocket.
        -   Added  panel with color-coded difference for accuracy.
        -   Implemented logic to derive WebSocket URL from  and append .
        -   Extensive styling adjustments with Tailwind CSS for compactness and non-overlapping elements (Chat Message 76).
        -   Installed  for icons.
- ****:
    - **Importance:** Stores frontend environment variables, crucially .
    - **Changes Made**: Explicitly stated in the prompt not to modify. The frontend is configured to read from it.
</code_architecture>

<pending_tasks>
The explicit request in the last message is to make sure it is fully functional in the frontend as well after a comprehensive update to the backend. This implies a verification or testing task is pending.
</pending_tasks>

<current_work>
The current state of the application involves a robust full-stack implementation of the Rugs Pattern Tracker. The backend, built with FastAPI, is now significantly enhanced. It uses a multi-layered prediction engine:
1.  **EnhancedPatternEngine:** Provides the foundational statistical analysis of game patterns (Post-Max-Payout Recovery, Ultra-Short High-Payout, Momentum Thresholds), maintaining game history and pattern statistics.
2.  **GameAwareMLPatternEngine:** An advanced, game-specific machine learning layer that wraps the . It extracts features highly relevant to the game's mechanics (e.g., distance to pattern triggers, ultra-short clustering, drought cycles, treasury pressure, duration percentiles) and uses an online learning algorithm to dynamically adjust prediction weights and confidence. This ML component is designed to enhance the base statistical predictions without replacing them.

The backend communicates with an external Rugs.fun Socket.IO source for real-time game state updates. These updates are processed by the integrated ML and statistical engines, and the resulting enriched data (game state, patterns, ML-enhanced prediction, ML status, and prediction history) is broadcast via a WebSocket to connected frontend clients. All backend API endpoints, including health checks, status, patterns, history, and metrics, are strictly prefixed with . A new  endpoint provides historical prediction accuracy.

The frontend, a React application, has undergone a significant facelift to become a developer debug menu. It presents all real-time information on a single screen, designed to avoid vertical scrolling on a 1080p display. Key panels include:
-   **Prediction:** Displays the ML-enhanced predicted rug tick, confidence, tolerance, and remaining ticks.
-   **Live Tracking:** A visual bar showing current tick, predicted range, and overall game progression.
-   **ML Insights:** Detailed breakdown of ML prediction (ML vs. Base, ML weight, pattern/duration/treasury adjustments, overall accuracy, learning rate, and key features influencing the prediction).
-   **Patterns Table:** Compact display of the status, confidence, and key metrics for Pattern 1, 2, and 3.
-   **Weights & System:** Shows ML feature weights and system health indicators like error counts.
-   **Prediction History:** A table showing recent game predictions versus actual outcomes, including difference (color-coded for accuracy), peak multiplier, and end price.
-   **Raw Payload:** A compact viewer for the raw JSON data received from the WebSocket.

The system is set up for continuous operation using Supervisor, with both frontend and backend configured to read URLs from environment variables (e.g.,  and ), ensuring no hardcoded values.
</current_work>

<optional_next_step>
Verify the comprehensive backend and frontend updates to ensure full functionality and accurate data display.
</optional_next_step>
